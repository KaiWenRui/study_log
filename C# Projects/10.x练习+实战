                    ///数组和指针///
/*<1>关键字static
 * a.隐藏变量使得在其他源代码中不可使用extern函数采用该变量
 * b.静态类型存储类别
 * c.默认初始化为0可以减少工作量，在矩阵中可以一开始就定义为0
 *<2>计算符&、*（一元）
 *<3>如何创建并初始化数组
 *<4>指针（在已学过的基础上）、指针和数组的关系
 *<5>编写处理数组的函数
 *<6>二维数组*/


//10.1数组                不可在在除初始化外使用花括号形式赋值
//#include "stdio.h"
//int main()
//{
//    static int a[5]={[4] = 6};           //定义a数组第五个数为6，若只定义部分择剩下的元素被初始化为0，若不初始化则都是垃圾值
//    int b[]={[2]=3,4,5,9,10,12,11};    //未指定元素，则根据数组内元素自动算元素个数
//
//    //a[4]={5,3,6,9};  不起作用
//}


//10.1.5指定数组大小
//#include "stdio.h"
//#define SIZE 4
//int main(void)
//{
//    int arr[SIZE];       //整数字符常量
//    double lots[144];     //整数字面常量
//    /*多维数组*/
//    int box[3][6][10];     //类似于多个二维数组堆叠起来（3个二维数组(6行10列)）
//}



//10.3指针和数组
//#include "stdio.h"
//#define SIZE 4
//int main()
//{
//    short dates[SIZE];
//    short *pti;
//    short index;
//    double bills[SIZE];
//    double *ptf;
//    pti = dates;    //将dates的首元素地址赋予pti，在指针前加*得到该指针指向地址的值
//    ptf = bills;
//    printf("%23s %15s\n","shorts","double");      //short 占用2字节，double占用8字节
//    for(index=0;index<SIZE;index++)
//    {   //每次递增是增加一个存储单元及递增量和数据类型所占字节的乘积
//        printf("pointers + %d:%10p %10p\n",index,pti+index,ptf+index);
//    }
//    *pti+2    //dates的第一个元素+2
//    *(pti+2)    //dates的第三个元素
//    return 0;
//}


//10.4函数、数组和指针
/*一个处理数组的函数
 * 数组名是该数组首元素的地址，作为实际参数的数组名要求形式参数是一个与之匹配的指针
 * 函数原型可以省略参数名，即可以写成int sum(int *和int [])等价
 * */
//#include "stdio.h"
//int sum(const int ar[])   //函数原型
//{
//    int i;
//    int total =0;
//    for(i=0;i<9;i++)
//        total += ar[i];
//    return total;
//}
//int main()
//{
//    int ar[9]={1,2,3,4,5,6,7},x;
//    /*声明数组形参*/
//    //int  sum(int *a和int a[])    等价原型   *a和a[]均指向数组a首元素地址
//    x = sum(ar);      //传递指针
//    printf("%d",x);
//    return 0;
//}


//10.4.1使用指针形参
/*使用指针形参标识数组的开始
 *
 *使用关系运算符比较指针
 * */
//#include "stdio.h"
//#define SIZE 10
//int sump(int *start,int *end);
//int main()
//{
//    int marbles[SIZE]={20,10,5,39,4,16,19,26,31,20};
//    long answer;
//
//    answer = sump(marbles,marbles+SIZE);
//    printf("The total number of marbles is %ld.\n",answer);
//}
////使用指针算法
//int sump(int *start,int *end)
//{
//    int total=0;
//    while(start<end)       //不能使用解引函数，会导致超出数组范围从而返回内存值
//    {
//        total+=*start;       //把数组元素的值加起来
//        start++;             //把指针指向下一个元素
//    }
//    return total;
//}
/*10.12指针运算中的运算符*/
//#include "stdio.h"
//int data[2]={100,200};
//int moredata[2]={300,400};
//int main()
//{
//    int *p1,*p2,*p3;
//
//    p1 = p2 =data;
//    p3 = moredata;
//    printf(" *p1 = %d,  *p2=%d ,   *p3=%d\n",*p1,*p2,*p3);
//    printf("*p1++= %d, *++p2 = %d,(*p3)++=%d\n",*p1++,*++p2,(*p3)++);
///*  [(*p3)++解引用之后的值再加一]
// *  [*p1++先使用p1，再把p1的地址加1x（该类型所占字节大小）解引用]
// *  [*++p2先把p2的地址加上1x该指针类型所占字节大小，再解引用]*/
//    printf(" *p1 = %d,  *p3=%d\n",*p1,*p3);
///*只有(*p3)++改变了数组的值，其他两个操作分别把p1和p2指向数组的下一个元素*/
//    return 0;
//}


//10.4.2指针表示法和数组表示法
/*取址：指针变量也有自己的地址和值，对于指针而言，&运算符会给出指针本身的地址
 *指针和整数想加：可以使用+运算符把指针和整数想家，整数会和指针所指类型的大小（以字节为单位）相乘，然后把结果与初始地址相加，若超出初始指针指向数组范围，则未定义
 *指针求差：计算两个指针的差值。通过计算求出两个元素之间的距离，差值的单位与数组类型的单位相同
 *解引用：*运算符给出指针指向地址上存储的值*/
//#include "stdio.h"
//
//int main()
//{
//    int a[2]={1,2};          //定义数组a
//    int *ar;
//    ar = a;   //将a[0]的地址赋予ar指针
//    ar++;         //只有ar是指针的时候才能使用ar++
//    printf("%d",*ar);   //ar++后指向数组a的第二个值
//
//    return 0;
//}


//使用const保护数组中的数据
//#include "stdio.h"
//int sum(const int ar[],int n);       //函数原型
//int main()
//{
//    int x,ar[5]={1,2,3,4,5};
//    x = sum( ar,5);
//    printf("%d",x);
//    return 0;
//}
//int sum(const int ar[],int n)      //创建一个无法修改数组内元素的int类型数组(不能修改ar指向的数组中内容)
//{
//    int i;
//    int total=0;
//    for(i=0;i<n;i++)
//    {
//        total += ar[i];
//    }
//    ar[1] = 4;     //已经定义了ar数组无法被修改
//    return total;
//}
/*程序清单10.14    arf.c程序
 * 没有使用return机制但是mult_array（）函数更新了dip数组的值*/
//#include "stdio.h"
//#define SIZE 5
//void show_array(const double ar[],int n);
//void mult_array(double ar[],int n,double mult);
//int main()
//{
//    double dip[SIZE]={20.0,17.66,8.2,15.3,22.22};
//    printf("The original dip array:\n");
//    show_array(dip,SIZE);
//    mult_array(dip,SIZE,2.5);
//    printf("The dip array after calling mult_array():\n");
//    show_array(dip,SIZE);
//
//    return 0;
//}
//void show_array(const double ar[],int n)       //显示数组的内容
//{
//    int i;
//    for(i=0;i<n;i++)
//    {
//        printf("%8.3f",ar[i]);
//    }
//    putchar('\n');
//}
//void mult_array(double ar[],int n,double mult)   //把数组mult_array数组中的每一个值都乘2.5
//{
//    int i;
//    for(i=0;i<n;i++)
//        ar[i]*=mult;
//}


//10.6.2 const的其他内容
/*有const指针，接收有/无const数组地址
 *无const指针，只接收无从const地址*/
//#include "stdio.h"
//void show_array(const double *ar,int n);
//void mult_array(double *ar,int n,double mult);
//int main()
//{
//    double rates[5]={88.99,100.12,59.45,183.11,340.50};
//    const double *pd = rates;
//    /*不允许通过指针pd修改rates数组的值
//     *可以通过 rates[n] = ？修改rates数组的值，因为rates数组没有被const定义*/
//    const double locked[4]={0.08,0.075,0.0725,0.07};
//    double *pnc;
//    pd = rates;               //有效
//    pd = locked;              //有效
//    pnc = rates;              //有效
//    pnc = locked;             //无效，无const只能接收无const数组
//    show_array(rates,5);              //有效
//    show_array(locked,4);             //有效
//    mult_array(rates,5,1.2);          //有效
//    mult_array(locked,4,1.2);          //非const指针只能接收非const数组

/*指针前const限制指针地址上的值改变（定义一个不能指向别处的指针）
 *数据类型前const限制地址改变（该指针既不能更改它所指向的地址，也不能更改指向地址伤的值）*/


//    double *const pc = rates;
//    pc = &rates[2];    //不允许，因为指针pc已经指向了rates数组第一个元素，不允许修改指向第二个元素
//    *pc = 92.99;        //允许，修改的是指针pc指向的rates函数的第一个值
//    const double * const pl = rates;    //数据类型前加const限制指针指向的地址
//    pl = &rates[2];     //不允许
//    *pl = 92.99;       //不允许
//
//}


//10.7指针和多维数组
/*解引用一个指针（在指针前使用*运算符）活在数组名后使用带下表的[]运算符,得到引用对象代表的值*/
//#include "stdio.h"
//int main()
//{
//    int zippo[4][2]={{2,4},{6,8},{1,3},{5,7}};
//    *zippo = zippo[0][0];
//    *zippo+1 = zippo[0][1];
//    *zippo+2 = zippo[1][0];
//
//    printf("   zippo = %p,  zippo+1 = %p\n",zippo,zippo+1);
//    printf("zippo[0] = %p,  zippo[0]+1 = %p\n",zippo[0],zippo[0]+1);
//    printf("  *zippo = p,         *zippo+1 = %p\n",*zippo,*zippo+1);
//    printf("zippo[0][0] = %d\n",zippo[0][0]);
//    printf("  *zippo[0] = %d\n",*zippo[0]);
//    printf("    **zippo = %d\n",**zippo);
//
//    /*「 **zippo与*&zippo[0][0]等价」
//     * zippo是地址的地址，必须解引用两次才能获得原始值
//     *数组zippo是一个内含2个int类型值的数组的地址，所以zippo指向一个8字节的数据对象。故，zippo+1，它所指的地址加8字节
//     *zippo[2][1]等价的指针表示法是*(*(zippo+)+1)。
//     */
//
//    printf("        zippo[2][1] = %d\n",zippo[2][1]);
//    printf("*(*(zippo+2)+1) = %d\n",*(*(zippo+2)+1));
//
//    return 0;
//}


//10.7.1指向多维数组的指针
//#include "stdio.h"
//int main()
//{
//    int *a=NULL,*b=NULL;
//    int (* pz)[2];      //pz指向一个内含两个int类型值的数组
//    int *ptx[2];        //ptx指向一个内含两个int类型的指针
//    int zippo[4][2]={{2,4},{6,8},{1,3},{5,7}};
//    pz = zippo;
////    ptx = zippo;    //ptx是两个指向int指针元素的数组
//    ptx[0] = a;
//    ptx[1] = b;       //a是指针且初始化了，ptx是内含两个指针元素的数组
//    pz[1] = a;  //a是指针，pz是内含两个int类型元素的数组
//    printf("   pz =%p    pz+1=%p\n",pz,pz+1);        //pz代表了zippo，是两个int类型的数组
//    printf("pz[0]=%p,pz[0]+1=%p \n",pz[0],pz[0]+1);  //地址和数值上：pz[0]=pz[0][0]=pz;pz[0]+1只是加了4字节
//    printf("  *pz = %p   *p+1=%p\n",*pz,*pz+1);      //*pz本是解引用zippo[0][0]的值和pz[0],pz的地址相同
//    printf("pz[0][0]=%d\n",pz[0][0]);
//    printf(" *pz[0]=%d\n",*pz[0]);
//    printf("**pz=%d\n",**pz);
//    printf("pz[2][1]=%d\n",pz[2][1]);
//    printf("*(*(pz+2)+1)=%d\n",*(*(pz+2)+1));      //pz+2为zippo[2][0],*(*(pz+2)+1)是zippo[2][1]
//    /*pz+2加了16位，*(*(pz+2)+1)加了16+4位*/
//    return 0;
//    //当同类型指针指向同类型数组时，该指针用法可以用数组的方法
//    /*zippo[m][n]==*(*(zippo+m)+n)
//     * pz[m][n]=*(*(pz+m)+n)*/
//
//}

//10.7.2指针的兼容性
//#include <stdio.h>
//int main()
//{
//    int *pt;
//    int (*pa)[3];
//    int ar1[2][3]={{1,2,3}};
//    int ar2[3][2]={{1,2}};
//    int **p2;    //一个指向指针的指针
//    pt = &ar1[0][0];
//    printf("pt(&ar1[0][0])=%p  pt(&ar1[0][0])=%d\n",pt,*pt);
//    pt = ar1[0];
//    printf("pt(ar1[0])=%p   pt(ar1[0])=%d\n",pt,*pt);
//    pt = ar1;   //不兼容的指针类型从'int[2][3]'赋值给'int *',一维指针不可接收二维数组非某一元素的地址
///*  pt指向一个int类型值，而ar1指向一个内含3个int类型元素的数组
// *  pa指向一个内含3个int类型元素的数组，与ar1兼容，但ar2指向一个内含2个int类型元素的数组，故pa与ar2不兼容
// *  ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
// *  p2是指向指针的指针，而ar2是指向数组的指针，该数组内含两个int类型元素的数组，p2和ar2的类型不同
// *  但是*p2是指向int类型的指针，与ar2[0]兼容,因为ar2[0]是指向该数组的首元素(ar2[0][0])的指针，所以ar2[0]也是指向int的指针
// *
// * */
/*只有当二维指针接收到二维数组的地址时，采用指针名=数组名才是数组首元素地址*/
//    pa = ar1;
//    pa = ar2;     //pa有三个元素，而ar2只有两个元素
//    p2 = &pt;       //都是指向int *的指针
//    *p2 = ar2[0];   //都是指向int的指针
//    p2 = ar2;         //不兼容的指针类型从'int[3][2]'赋值给'int **'
//}



//#include <stdio.h>
//int main()
//{
//    const int y;
//    const int *p2=&y;
//    const int **pp2;
//    const int n = 13;
//    int *p1;
//    p1 = p2;
//    printf("pp2 = %p\n",&pp2);
//    /*无法通过p1更改y，其行为是未定义的*/
//    pp2 = &p1;     //允许，但是这导致const 限定符失效（根据第337行代码可知不允许通过pp2修改它所指向的值 ）
//    *p1 = 10;
//    *pp2 = &(*p1);
//    /*      pp2是指向指针的指针，pp2=&p1->&(*pp2)解引用为指向p1的地址，*pp2->**pp2解引用为p1地址上的值
//     * 不能打印*pp2的值，因为pp2的定义是指针的指针，只能打印出*pp2（也就是p1的地址）
//     * */
//    printf("p1 = %p   pp2 = %p  *pp2 = %d  **pp2 = %p\n",&p1,&*pp2,**pp2,&(*(*pp2)));
//    *pp2 = &n;  //有效，两者声明都为const int，但这将导致p1指向n（*pp2已被修改）
//    *p1 = 10;    //有效，但这将改变n的值（但是根据335行代码可知，n的值不能修改）
//    printf("%d",n);
//
//    return 0;
//}



//clang中会改变，但gcc中不会改变n的值
//**p->&*p->&p
//#include "stdio.h"
//int main()
//{
//    const int **p;
//    const int n = 13;
//    int * p2;
//    printf("p = %p. n = %p. %d\n",p,&n,n);
//    p =&p2;
//    printf("p = %p. n = %p. %d\n",p,&n,n);
//    *p =&n;
//    printf("p = %p. n = %p. %d\n",p,&n,n);
//    *p2 =10;
//    printf("p = %p. n = %p. %d",p,&n,n);
//    return 0;
//
//}


//10.7.3函数和多维数组
//#include "stdio.h"
//#define ROWS 3
//#define COLS 4
//void sum_rows(int ar[][COLS],int rows);
//void sum_cols(int ar[][COLS],int );     //省略第二个参数名
//int sum2d(int (*ar)[COLS],int rows);     //另一种语法
//int main()
//{
//    /*使用处理一维数组的方法处理二维数组*/
//    int junk[ROWS][COLS]={{2,4,6,8},
//                          {3,5,7,9,},
//                          {12,10,8,6}};
//    sum_rows(junk,ROWS);
//    sum_cols(junk,ROWS);
//    sum2d(junk,ROWS);
//    printf("Sum of all elements = %d\n", sum2d(junk,ROWS));
//}
//void sum_rows(int ar[][COLS],int rows)
//{
//    int r,c,tot;
//    for(r=0;r<rows;r++)
//    {
//        tot =0;
//        for(c=0;c<COLS;c++)
//            tot +=ar[r][c];
//        printf("row %d;sum = %d\n",r,tot);
//    }
//}
//void sum_cols(int ar[][COLS],int rows)
//{
//    int r,c,tot;
//    for(r=0;r<rows;r++)
//    {
//        tot =0;
//        for(c=0;c<COLS;c++)
//            tot +=ar[r][c];
//        printf("cols %d; sum = %d\n",r,tot);
//    }
//}
//int sum2d(int (*ar)[COLS],int rows)
//{
//    int r,c,tot=0;
//    for(r=0;r<rows;r++)
//        for(c=0;c<COLS;c++)
//            tot +=ar[r][c];
//    return tot;
//}

